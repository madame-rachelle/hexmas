// for dialogue advance
Class mkBossClearedToken : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
	}
}
Class mkMirrorManFoundToken : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
	}
}
Class mkNightmareLordFoundToken : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
	}
}
Class mkExBossClearedToken : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
	}
}
Class mkNetherGemQuestToken : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
	}
}
Class mkExBossQuestToken : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
	}
}
Class mkNetherGemDestroyToken : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
	}
}

Class mkClericKeyDrops : Actor
{
	void A_TossKeyItems()
	{
		bool haskey1 = false, haskey2 = false;
		for ( int i=0; i<MAXPLAYERS; i++ )
		{
			if ( !playeringame[i] || !players[i].mo ) continue;
			if ( players[i].mo.FindInventory("KeyDungeon") ) haskey1 = true;
			if ( players[i].mo.FindInventory("KeySteel") ) haskey2 = true;
		}
		if ( !haskey1 )
		{
			let a = A_DropItem("KeyDungeon");
			a.TossItem();
		}
		if ( !haskey2 )
		{
			let a = A_DropItem("KeySteel");
			a.TossItem();
		}
	}

	Default
	{
		+NOGRAVITY;
		+NOBLOCKMAP;
		+DONTSPLASH;
	}

	States
	{
	Spawn:
		TNT1 A 10;
		TNT1 A 1 A_TossKeyItems();
		Stop;
	}
}

Class mkClericNPC : Actor
{
	Actor spawnspot;

	Default
	{
		//$Title Cleric NPC
		//$Category Marisa/Decoration
		Translation "146:163=[32,0,0]:[255,0,0]";
		Health 100;
		PainChance 255;
		Speed 10;
		Radius 12;
		Height 56;
		MONSTER;
		+FRIENDLY;
		+STANDSTILL;
		-COUNTKILL;
		Obituary "%o got bludgeoned by a cleric.";
		Tag "Cleric";
		DropItem "mkClericKeyDrops";
	}
	override int DamageMobj( Actor inflictor, Actor source, int damage, Name mod, int flags, double angle )
	{
		if ( (Health > 0) && source && source.player && bFRIENDLY )
		{
			source.A_Print("Have you gone insane?");
			bFRIENDLY = false;
		}
		return Super.DamageMobj(inflictor,source,damage,mod,flags,angle);
	}
	void A_MaceAttack()
	{
		if ( !target ) return;
		if ( CheckMeleeRange() )
		{
			int damage = 25+(random[MaceAtk]()&15);
			A_PlaySound("EttinAttack",CHAN_WEAPON);
			int newdam = target.DamageMobj(self,self,damage,'Melee');
			target.TraceBleed(newdam>0?newdam:damage,self);
		}
		else A_PlaySound("FighterHammerMiss",CHAN_WEAPON);
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		GiveInventory("ArtiHealth",10);
		spawnspot = Spawn("PatrolPoint",SpawnPoint);
		spawnspot.angle = SpawnAngle;
		spawnspot.ChangeTid(args[0]);
	}
	States
	{
	Spawn:
		CLER ] 2
		{
			A_LookEx(LOF_NOJUMP);
			if ( target && (!bFRIENDLY || !target.player) )
				return ResolveState("See");
			return ResolveState(null);
		}
		Wait;
	See:
		CLER AABBCCDD 2
		{
			A_Chase();
			if ( !target || (target.health <= 0) || (target.player && bFRIENDLY) )
			{
				A_ClearTarget();
				if ( !spawnspot ) ThrowAbortException("Spawn Spot does not exist for Cleric NPC");
				goal = spawnspot;
				return ResolveState("Returning");
			}
			return ResolveState(null);
		}
		CLER A 0
		{
			if ( health <= 75 )
			{
				Inventory h = FindInventory("ArtiHealth");
				if ( h && (h.Amount > 0) ) UseInventory(h);
			}
		}
		Loop;
	ChaosReturn:
		CLER A 10;
		CLER A 0 Teleport(spawnspot.pos,spawnspot.angle,TELF_SOURCEFOG|TELF_DESTFOG);
		CLER A 5;
		Goto Spawn;
	Returning:
		CLER AABBCCDD 2
		{
			A_Chase(null,null);
			double dist = Distance2D(spawnspot);
			if ( dist > 2000. ) return ResolveState("ChaosReturn");
			if ( (dist < speed) || !goal )
			{
				SetOrigin(spawnspot.pos,true);
				angle = spawnspot.angle;
				A_ClearTarget();
				A_ResetHealth();
				bFRIENDLY = true;
				goal = null;
				return ResolveState("Spawn");
			}
			return ResolveState(null);
		}
		Loop;
	Melee:
		CLER EF 6 A_FaceTarget();
		CLER G 6 A_MaceAttack();
		Goto See;
	Pain:
		CLER H 4;
		CLER H 4 A_PlaySound("PlayerClericPain");
		Goto See;
	Death:
		TNT1 A 0 ACS_NamedExecute("updatemarisa",2,1);
		CLER I 6;
		CLER J 6 A_PlaySound("PlayerClericNormalDeath");
		CLER KL 6;
		CLER M 6 A_NoBlocking();
		CLER NOP 6;
		CLER Q -1;
		Stop;
	XDeath:
		TNT1 A 0 ACS_NamedExecute("updatemarisa",2,1);
		CLER R 5 A_PlaySound("PlayerClericCrazyDeath");
		CLER S 5;
		CLER T 5 A_NoBlocking();
		CLER UVWXYZ 5;
		CLER [ -1;
		Stop;
	Ice:
		TNT1 A 0 ACS_NamedExecute("updatemarisa",2,1);
		CLER \ 5 A_FreezeDeath();
		CLER \ 1 A_FreezeDeathChunks();
		Wait;
	Burn:
		TNT1 A 0 ACS_NamedExecute("updatemarisa",2,1);
		FDTH C 5 Bright A_PlaySound("PlayerClericBurnDeath");
		FDTH D 4 Bright;
		FDTH G 5 Bright;
		FDTH H 4 Bright A_PlaySound("PlayerClericCrazyDeath");
		FDTH I 5 Bright;
		FDTH J 4 Bright;
		FDTH K 5 Bright;
		FDTH L 4 Bright;
		FDTH M 5 Bright;
		FDTH N 4 Bright;
		FDTH O 5 Bright;
		FDTH P 4 Bright;
		FDTH Q 5 Bright;
		FDTH R 4 Bright;
		FDTH S 5 Bright A_NoBlocking();
		FDTH T 4 Bright;
		FDTH U 5 Bright;
		FDTH V 4 Bright;
		Stop;
	}
}

Class mkApprenticeSighting : Actor
{
	int scnt, bcnt;
	bool stp;
	override void Activate( Actor activator )
	{
		if ( !InStateSequence(CurState,FindState("Spawn")) ) return;
		let t = ThinkerIterator.Create("MapSpot");
		Actor a;
		while ( a = Actor(t.Next()) )
		{
			if ( a.tid != args[0] ) continue;
			target = a;
			break;
		}
		if ( target ) SetStateLabel("Turn");
	}
	override void Tick()
	{
		Super.Tick();
		if ( --bcnt <= 0 )
		{
			bcnt = 50;
			A_PlaySound("apprentice/active",CHAN_5,0.5,attenuation:4.0);
		}
	}
	Default
	{
		//$Title Elder Apprentice (Sighting)
		//$Category Marisa/Decoration
		Translation "0:255=@100[0,0,0]", "187:202=216:216";
		Speed 8;
		Radius 16;
		Height 64;
		+SOLID;
		+CANPASS;
		+DROPOFF;
		Tag "????";
	}
	States
	{
	Spawn:
		MAGE A -1 Bright;
		Stop;
	Turn:
		MAGE A 40 Bright;
		MAGE A 1 Bright A_FaceTarget(6);
		MAGE A 0 Bright A_JumpIf(deltaangle(angle,AngleTo(target))<double.epsilon,"Run");
		Goto Turn+1;
	Run:
		MAGE AAABBBCCCDDD 2 Bright
		{
			if ( !(scnt%6) )
			{
				if ( stp ) A_PlaySound("world/amb4",CHAN_AUTO,0.5,attenuation:3.5);
				else A_PlaySound("world/amb11",CHAN_AUTO,0.5,attenuation:3.5);
				stp = !stp;
			}
			scnt++;
			if ( Distance2D(target) <= speed ) Destroy();
			else TryMove(Vec2Offset(cos(angle)*speed,sin(angle)*speed),32);
		}
		Loop;
	}
}

// remember him?
// he's behind everything...
Class mkMirrorMan : Actor
{
	private bool InConsoleplayerLOS()
	{
		if ( !CheckSight(players[consoleplayer].mo) )
			return false;
		double vfov = CVar.GetCVar('fov',players[consoleplayer]).GetFloat()*0.5;
		double hfov = atan(Screen.GetAspectRatio()*tan(vfov));
		let mo = players[consoleplayer].mo;
		Vector3 ppos = mo.Vec2OffsetZ(0,0,mo.player.viewz);
		Vector3 tpos = Vec3Offset(0,0,height*0.5);
		Vector3 sc = level.SphericalCoords(ppos,tpos,(mo.angle,mo.pitch));
		return ((abs(sc.x)<hfov)&&(abs(sc.y)<vfov));
	}

	override void Tick()
	{
		Super.Tick();
		if ( InConsoleplayerLOS() ) bAMBUSH = true;
		if ( bAMBUSH && !bSTANDSTILL )
		{
			alpha = max(alpha-0.03,0.0);
			if ( alpha <= 0.0 ) Destroy();
		}
		else
		{
			if ( bSTANDSTILL ) alpha = min(alpha+0.03,1.35);
			else alpha = min(alpha+0.09,1.35);
		}
	}

	Default
	{
		//$Title The Mirror Man (Sighting)
		//$Sprite MRMNB0
		//$Category Marisa/Decoration
		RenderStyle "Translucent";
		Alpha 0.0;
		Scale 0.17;
		Radius 24;
		Height 80;
		+SOLID;
		+NOGRAVITY;
		+LOOKALLAROUND;
	}

	States
	{
	Spawn:
		MRMN A -1 Bright;
		Stop;
		TNT1 A -1;	// Dummy
		Stop;
	}
}

// The rebirth of D'Sparil...
Class mkNightmareLordSighting : Actor
{
	Default
	{
		//$Title Nightmare Lord (Sighting)
		//$Category Marisa/Decoration
		Radius 32;
		Height 64;
	}

	override void Activate( Actor activator )
	{
		SetStateLabel("Disappear");
	}

	States
	{
	Spawn:
		NLRX A -1;
		Stop;
	Disappear:
		NLRX BCDE 4 A_SetScale(scale.x+0.2);
		NLRD A 30 A_SetScale(2.0);
		NLRD A 0 A_PlaySound("nightmarelord/appear",CHAN_6,1.0,false,0.3);
		NLRD ABCDEF 4;
		NLRD G 20;
		NLRD G 150 A_PlaySound("nightmarelord/see",CHAN_VOICE,attenuation:ATTN_NONE);
		NLRD G 0 A_PlaySound("nightmarelord/disappear",CHAN_6,1.0,false,0.3);
		NLRD HIJKL 3 Bright;
		Stop;
	}
}

Class mkSmoothLookTo : Thinker
{
	Actor target;
	double angle, pitch, speed;

	static double FaceToFace( Actor a, Actor b )
	{
		if ( !a || !b ) return 0;
		Vector3 otherpos = level.Vec3Diff(a.Vec3Offset(0,0,a.height),b.Vec3Offset(0,0,b.height));
		double dist = otherpos.length();
		if ( dist > 0 ) return -asin(otherpos.z/dist);
		return 0;
	}

	static void LookTowards( Actor target, double angle, double pitch = 0.0, double speed = 1.0 )
	{
		if ( !target ) return;
		let slt = new("mkSmoothLookTo");
		slt.ChangeStatNum(STAT_USER);
		slt.target = target;
		slt.angle = angle;
		slt.pitch = pitch;
		slt.speed = speed;
	}

	static void LookTowardsTid( Actor target, int ttid, double speed = 1.0 )
	{
		if ( !target ) return;
		let slt = new("mkSmoothLookTo");
		slt.ChangeStatNum(STAT_USER);
		slt.target = target;
		Actor t = ActorIterator.Create(ttid).Next();
		slt.angle = target.AngleTo(t);
		slt.pitch = FaceToFace(target,t);
		slt.speed = speed;
	}

	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		double iangle, ipitch;
		iangle = Actor.DeltaAngle(target.angle,angle);
		ipitch = Actor.DeltaAngle(target.pitch,pitch);
		iangle = Clamp(iangle,-speed,speed);
		ipitch = Clamp(ipitch,-speed,speed);
		target.A_SetAngle(target.angle+iangle,SPF_INTERPOLATE);
		target.A_SetPitch(target.pitch+ipitch,SPF_INTERPOLATE);
		if ( (abs(iangle) < speed) && (abs(ipitch) < speed) )
			Destroy();
	}
}

// cheerin' on
Class mkEttinSpectator : Actor
{
	static void DeleteMe( Actor ettinactor )
	{
		if ( !(ettinactor is 'mkEttinSpectator') ) return;
		ettinactor.Destroy();
	}

	Default
	{
		//$Title Ettin Spectator
		//$Category Marisa/Decoration
		Radius 25;
		Height 68;
		Mass 175;
		Speed 13;
		MONSTER;
		+NODAMAGE;
		+NEVERTARGET;
		-SHOOTABLE;
		-COUNTKILL;
	}
	States
	{
	Spawn:
		ETTN A 1;
		Wait;
	Cheer:
		ETTN A 10 A_SetTics(Random[EttinSpectator](4,16));
		ETTN BE 5;
		ETTN F 20 A_PlaySound("EttinSight",attenuation:2.5);
		ETTN EB 5;
		ETTN A 8;
		Goto Spawn;
	Flinch:
		ETTN A 10 A_SetTics(Random[EttinSpectator](16,32));
		ETTN H 7 A_PlaySound("PuppyBeat",attenuation:2.5);
		Goto Spawn;
	Flinch2:
		ETTN A 10 A_SetTics(Random[EttinSpectator](4,8));
		ETTN H 11 A_PlaySound("PuppyBeat",attenuation:2.5);
		ETTN A 3
		{
			A_ClearTarget();
			bCHASEGOAL = true;
			goal = ActorIterator.Create(args[0]).Next();
		}
		Goto Leave;
	Leave:
		ETTN ABCD 3 A_Chase(null,null);
		Loop;
	}
}
