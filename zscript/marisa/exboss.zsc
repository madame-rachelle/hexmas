// Twin Minotaurs
// When one is defeated, the other will fuse with the dead one, becoming a stronger boss

Class mkMinotaur : Actor
{
	const EXBOSS_TID = 125;

	Actor brother;
	Array<Actor> crowd;
	int ccnt;

	// turns out it can not be blocking
	bool BlockingLineIsBlocking()
	{
		if ( !BlockingLine ) return false;
		// one-sided
		if ( !BlockingLine.sidedef[1] ) return true;
		// blocks us
		if ( BlockingLine.flags&(Line.ML_BLOCKING|Line.ML_BLOCKMONSTERS|Line.ML_BLOCKEVERYTHING) ) return true;
		return false;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		// inflate health
		int nplayers = 0;
		for ( int i=0; i<MAXPLAYERS; i++ ) if ( playeringame[i] ) nplayers++;
		Health += (G_SkillPropertyInt(SKILLP_ACSReturn)-2)*500;
		Health += 100*(nplayers-1)*G_SkillPropertyInt(SKILLP_ACSReturn);
		// find brother
		// this will be used to notify of death in order to start phase 2
		let ai = ActorIterator.Create(tid);
		Actor a;
		while ( a = ai.Next() )
		{
			if ( a == self ) continue;
			brother = a;
			break;
		}
		if ( brother ) SetTag("\cfTwin Maulotaur\c-");
		// find crowd
		// they will react to minotaurs attacking and getting hurt
		crowd.Clear();
		let ti = ThinkerIterator.Create("mkEttinSpectator");
		while ( a = Actor(ti.Next()) )
			crowd.Push(a);
	}

	double _PitchTo( Actor other )
	{
		if ( !other ) return 0;
		Vector3 otherpos = level.Vec3Diff(Vec3Angle(radius/2,angle,missileheight),other.Vec3Offset(0,0,other.height/2));
		double dist = otherpos.length();
		if ( dist > 0 ) return -asin(otherpos.z/dist);
		return 0;
	}

	override void Tick()
	{
		if ( bNOPAIN && brother && brother.bKILLED )
			vel *= 0;	// stupid fighter punches
		Super.Tick();
	}

	void A_DoNotInterrupt( bool reset = false )
	{
		bNOPAIN = !reset;
	}

	void A_ChargeIntoArena()
	{
		Vector2 dir = RotateVector((speed*1.5,0),angle);
		TryMove(Vec2Offset(dir.x,dir.y),int(maxdropoffheight));
		let bi = BlockThingsIterator.Create(self,radius*3);
		while ( bi.Next() )
		{
			Actor a = bi.Thing;
			if ( !a || (a.species == species) || (!a.bIsMonster && !a.player) || (a.Health <= 0) || (Distance3D(a) > (radius*2+a.radius)) ) continue;
			int dmg = Random[MinotaurMelee](10,15);
			int nd = a.DamageMobj(self,self,dmg,'Melee');
			if ( (a.Mass < LARGE_MASS) && !a.bDONTTHRUST )
			{
				a.vel.xy += dir*1.2/a.mass;
				a.vel.z += 5;
			}
			if ( !a.bNOBLOOD ) a.TraceBleedAngle((nd>0)?nd:dmg,angle,0);
		}
		if ( ccnt&1 )
		{
			let s = Spawn("PunchPuff",pos,ALLOW_REPLACE);
			s.vel.z = 2;
		}
		ccnt++;
		if ( ccnt > 15 )
		{
			ccnt = 0;
			vel.xy = dir;
			SetState(CurState+1);
		}
	}

	void A_CrowdCheer()
	{
		for ( int i=0; i<crowd.Size(); i++ )
			crowd[i].SetStateLabel("Cheer");
	}

	void A_CrowdFlinch( bool all = false )
	{
		for ( int i=0; i<crowd.Size(); i++ )
		{
			if ( !all && Random[Crowd](0,8) ) continue;
			crowd[i].SetStateLabel("Flinch");
		}
	}

	void A_CrowdFlinch2()
	{
		for ( int i=0; i<crowd.Size(); i++ )
			crowd[i].SetStateLabel("Flinch2");
	}

	void A_DecideDash()
	{
		if ( (brother && brother.bKILLED) || !target || Random[MinotaurDash](0,8) || (Distance2D(target) < 300) ) return;
		// simulate dash in a straight line
		Vector2 dir = RotateVector((speed*1.5,0),AngleTo(target));
		Vector3 oldpos = pos;
		bool success = false;
		for ( int i=0; i<30; i++ )
		{
			if ( TryMove(Vec2Offset(dir.x,dir.y),int(maxdropoffheight)) )
				continue;
			if ( BlockingMobj == target )
			{
				success = true;
				break;
			}
			if ( BlockingLineIsBlocking() || (BlockingMobj && BlockingMobj.bSOLID && !(BlockingMobj is 'mkMovingFloorTrap')) )
				break;
		}
		SetOrigin(oldpos,false);
		if ( success )
		{
			ccnt = 0;
			A_CrowdCheer();
			SetStateLabel("Dash");
		}
	}

	void A_Dash()
	{
		A_FaceTarget(1);
		Vector2 dir = RotateVector((speed*1.5,0),angle);
		if ( TryMove(Vec2Offset(dir.x,dir.y),int(maxdropoffheight)) )
		{
			if ( ccnt&1 )
			{
				let s = Spawn("PunchPuff",pos,ALLOW_REPLACE);
				s.vel.z = 2;
			}
			ccnt++;
			if ( ccnt > 30 )
			{
				vel.xy = dir;
				SetStateLabel("DashMiss");
				return;
			}
			return;
		}
		if ( BlockingMobj && BlockingMobj.bSOLID && !(BlockingMobj is 'mkMovingFloorTrap') )
		{
			if ( BlockingMobj.bSHOOTABLE )
			{
				int dmg = Random[MinotaurMelee](10,15);
				int nd = BlockingMobj.DamageMobj(self,self,dmg,'Melee');
				if ( (BlockingMobj.Mass < LARGE_MASS) && !BlockingMobj.bDONTTHRUST )
				{
					BlockingMobj.vel.xy += dir*1.2/BlockingMobj.mass;
					BlockingMobj.vel.z += 5;
				}
				if ( !BlockingMobj.bNOBLOOD ) BlockingMobj.TraceBleedAngle((nd>0)?nd:dmg,angle,0);
			}
			vel.xy = -dir*0.5;
			vel.z = 1;
			if ( !BlockingMobj.bSHOOTABLE || BlockingMobj.bNOBLOOD )
				BlockingMobj.A_PlaySound("FighterHammerHitWall");
			else BlockingMobj.A_PlaySound("FighterHammerHitThing");
			A_CrowdCheer();
			SetStateLabel("DashHit");
		}
		vel.xy = -dir*0.5;
		vel.z = 1;
		A_PlaySound("FighterHammerHitWall");
		SetStateLabel("DashHit");
		A_QuakeEx(3,3,3,15,0,200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:50);
	}

	void A_MinotaurMelee( bool ground = false )
	{
		special1 = 0;
		let bi = BlockThingsIterator.Create(self,1024);
		while ( bi.Next() )
		{
			Actor a = bi.Thing;
			if ( !a || (a.species == species) || !a.bSHOOTABLE || (Distance3D(a) > meleerange*2+a.radius) ) continue;
			Vector3 sc = level.SphericalCoords(pos,a.pos,(angle,0));
			if ( abs(sc.x) > 90 ) continue;
			int dmg = Random[MinotaurMelee](18,25);
			int nd = a.DamageMobj(self,self,dmg,'Melee');
			if ( (a.Mass < LARGE_MASS) && !a.bDONTTHRUST )
			{
				a.vel.xy += Vec2To(a).unit()*900/a.mass;
				a.vel.z += ground?4:2;
			}
			if ( !a.bNOBLOOD ) a.TraceBleedAngle((nd>0)?nd:dmg,angle,0);
			if ( a.bNOBLOOD ) a.A_PlaySound("FighterHammerHitWall");
			else a.A_PlaySound("FighterHammerHitThing");
		}
		if ( ground )
		{
			A_PlaySound("FighterHammerHitWall");
			A_QuakeEx(3,3,3,15,0,200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:50);
		}
		A_CrowdCheer();
	}

	void A_MinotaurFireBurst()
	{
		double ang = (special1*10)-30;
		let a = SpawnMissileXYZ(Vec3Angle(radius,angle+ang,missileheight),target,"MinotaurFX1",false);
		a.bTHRUSPECIES = true;
		a.Species = "Minotaur";
		a.angle += ang*0.3;
		a.pitch = _PitchTo(target);
		a.angle += FRandom[MinotaurBurst](-5,5);
		a.pitch += FRandom[MinotaurBurst](-5,5);
		a.vel = (cos(a.angle)*cos(a.pitch),sin(a.angle)*cos(a.pitch),-sin(a.pitch))*30;
		special1++;
	}

	void A_MinotaurFireSnake()
	{
		Actor a;
		for ( int i=-1; i<=1; i++ )
		{
			a = SpawnMissileAngle("MinotaurFX2",angle+i*30,0);
			a.bTHRUSPECIES = true;
			a.Species = "Minotaur";
		}
	}

	void A_ChaseBrother()
	{
		for ( int i=0; i<2; i++ )
		{
			A_Chase(null,null);
			if ( !goal )
			{
				A_Face(brother);
				SetStateLabel("InitiatePhaseTwo");
				break;
			}
		}
	}

	void A_NotifyBrother()
	{
		A_CrowdFlinch(true);
		if ( !brother ) return;
		brother.A_PlaySound(SeeSound,CHAN_VOICE);
		brother.bBUDDHA = true;
		let s = Spawn("PatrolPoint",pos);
		brother.bCHASEGOAL = true;
		brother.goal = s;
	}

	void A_PainDash()
	{
		if ( ccnt > 0 )
		{
			ccnt = 0;
			vel.xy += RotateVector((speed*0.3,0),angle);
		}
	}

	void A_WaitDeath()
	{
		if ( brother && (brother.tics != -1) ) return;
		SetState(CurState+1);
	}

	void A_InitiatePhaseTwo()
	{
		A_CrowdFlinch2();
		for ( int i=0; i<10; i++ ) Spawn("mkMinotaurExSmoke",Vec3Angle(radius*2,i*36,0));
		let n = Spawn("mkMinotaurEx",pos);
		n.A_QuakeEx(9,9,9,50,0,3000,"",QF_RELATIVE|QF_SCALEDOWN,falloff:1000);
		n.A_PlaySound("SorcererBigBallExplode",CHAN_6,1.0,false,ATTN_NONE);
		n.A_PlaySound("SorcererBigBallExplode",CHAN_7,1.0,false,ATTN_NONE);
		n.angle = angle;
		n.target = target;
		n.ChangeTid(EXBOSS_TID);
		brother.Destroy();
		ClearCounters();
		Destroy();
	}

	override string GetObituary( Actor victim, Actor inflictor, Name mod, bool playerattack )
	{
		if ( mod == 'Melee' ) return HitObituary..(brother?"Twin Maulotaur.":"Maulotaur.");
		return Obituary..(brother?"Twin Maulotaur.":"Maulotaur.");
	}

	Default
	{
		//$Title Twin Minotaur
		//$Category Marisa/Monsters
		Health 4000;
		Scale 1.5;
		Radius 40;
		Height 150;
		Mass 1500;
		Speed 20;
		Painchance 25;
		MeleeRange 80;
		MissileHeight 120;
		DamageFactor "Falling", 0.0;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+TELESTOMP;
		+NOTARGET;
		+NOTELEFRAG;
		+NOICEDEATH;
		+LAXTELEFRAGDMG;
		+LOOKALLAROUND;
		+NOINFIGHTSPECIES;
		+DONTHARMSPECIES;
		Species "Minotaur";
		Tag "\cfMinotaur\c-";
		Obituary "%o was burned to a crisp by the ";
		HitObituary "%o got too close to the ";
		SeeSound "MaulatorSight";
		ActiveSound "MaulatorActive";
		PainSound "MaulatorPain";
		DeathSound "MaulatorDeath";
	}
	States
	{
	Spawn:
		MINO X -1;
		Stop;
	Idle:
		MINO A 2 A_Look();
		Loop;
	See:
		MINO ABCD 4
		{
			// cheap fix
			if ( floorpic == TexMan.CheckForTexture("X_001",TexMan.Type_Flat) )
				Teleport((-4096,2816,128),270,TELF_SOURCEFOG|TELF_DESTFOG);
			if ( brother && brother.bKILLED )
			{
				A_SetTics(3);
				A_ChaseBrother();
			}
			else A_Chase();
		}
		MINO A 0 A_DecideDash();
		Loop;
	Dash:
		MINO DC 5 A_FaceTarget();
		MINO U 0 A_PlaySound("BishopAttack",CHAN_7,0.5);
		MINO U 1 A_Dash();
		Wait;
	DashHit:
		MINO A 12;
		Goto See;
	DashMiss:
		MINO A 0 A_PlaySound("minotaur/swing",CHAN_WEAPON);
		MINO V 10;
		MINO Y 4;
		MINO Z 9 A_MinotaurMelee();
		Goto See;
	Melee:
		MINO V 0 A_PlaySound("minotaur/swing",CHAN_WEAPON);
		MINO V 8 A_FaceTarget();
		MINO W 5 A_FaceTarget();
		MINO X 10 A_MinotaurMelee(true);
		Goto See;
	Missile:
		MINO A 0 A_Jump(80,"Missile2");
		MINO A 0 A_PlaySound("MaulatorHamHit",CHAN_WEAPON);
		MINO V 10 A_FaceTarget();
		MINO Y 4 A_FaceTarget();
		MINO Z 0 A_MinotaurMelee();
		MINO ZZZZZZ 1 A_MinotaurFireBurst();
		MINO Z 3;
		Goto See;
	Missile2:
		MINO A 0 A_PlaySound("MaulatorHamSwing",CHAN_WEAPON);
		MINO V 10 A_FaceTarget();
		MINO W 4 A_FaceTarget();
		MINO X 0 A_MinotaurMelee(true);
		MINO X 9 A_MinotaurFireSnake();
		Goto See;
	Pain:
		MINO E 0 A_PainDash();
		MINO E 6 A_CrowdFlinch();
		MINO E 6 A_Pain();
		Goto See;
	ArenaEnter:
		MINO X 4 A_DoNotInterrupt();
		MINO DC 8;
		MINO U 0 A_PlaySound("BishopAttack",CHAN_7,0.5);
		MINO U 1 A_ChargeIntoArena();
		Wait;
		MINO C 0 A_CrowdCheer();
		MINO A 0 A_PlaySound("minotaur/swing",CHAN_WEAPON);
		MINO V 10;
		MINO Y 4;
		MINO Z 9 A_MinotaurMelee();
		MINO A 0 A_DoNotInterrupt(true);
		Goto Idle;
	InitiatePhaseTwo:
		MINO A 0 A_DoNotInterrupt();
		MINO A 1 A_WaitDeath();
		Wait;
		MINO V 20;
		MINO V 8 A_PlaySound("minotaur/swing",CHAN_WEAPON);
		MINO WX 5;
		MINO X 1 A_InitiatePhaseTwo();
		Stop;
	Death:
		MINO F 6 A_NotifyBrother();
		MINO G 5;
		MINO H 6 A_Scream();
		MINO I 5;
		MINO J 6;
		MINO K 5;
		MINO L 6;
		MINO M 5 A_NoBlocking();
		MINO N 6;
		MINO O 5;
		MINO P 6;
		MINO Q 5;
		MINO R 6;
		MINO S 5;
		MINO T -1;
		Stop;
	}
}

Class mkMinotaurExSmoke : Actor
{
	Default
	{
		Scale 2.0;
		Translation "0:32=164:185", "33:50=169:185";
	}
	States
	{
	Spawn:
		MNSM ABCDEFGHIJKLMNOPQ 3 Bright;
		Stop;
	}
}

Class mkMinotaurEx : Actor
{
	int scnt, ccnt;
	double lungepitch, bstr;
	bool wasinair;

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		// inflate health
		int nplayers = 0;
		for ( int i=0; i<MAXPLAYERS; i++ ) if ( playeringame[i] ) nplayers++;
		Health += (G_SkillPropertyInt(SKILLP_ACSReturn)-2)*2000;
		Health += 250*(nplayers-1)*G_SkillPropertyInt(SKILLP_ACSReturn);
	}
	override String GetObituary( Actor victim, Actor inflictor, Name mod, bool playerattack )
	{
		if ( mod == 'Slam' ) return "%o couldn't dodge the Hellsmith.";
		else if ( mod == 'Crush' ) return "%o was crushed by the Hellsmith.";
		return Super.GetObituary(victim,inflictor,mod,playerattack);
	}
	Default
	{
		//$Title Twin Minotaur (EX form)
		//$Category Marisa/Monsters
		Scale 2.0;
		Health 12000;
		Radius 50;
		Height 200;
		Mass 3000;
		Speed 24;
		Painchance 10;
		MeleeRange 100;
		MeleeThreshold 250;
		MissileHeight 150;
		DamageFactor "Falling", 0.0;
		Monster;
		+DROPOFF;
		+FLOORCLIP;
		+BOSS;
		+NORADIUSDMG;
		+DONTMORPH;
		+TELESTOMP;
		+NOTARGET;
		+NOTELEFRAG;
		+NOICEDEATH;
		+LAXTELEFRAGDMG;
		+LOOKALLAROUND;
		+EXTREMEDEATH;
		+NOINFIGHTSPECIES;
		+DONTHARMSPECIES;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Species "Minotaur";
		Tag "\cmHellsmith\c-";
		Obituary "%o was blown to pieces by the Hellsmith.";
		HitObituary "%o was smashed by the Hellsmith.";
		SeeSound "hellsmith/see";
		ActiveSound "hellsmith/active";
		PainSound "hellsmith/pain";
		DeathSound "hellsmith/die";
	}
	// turns out it can not be blocking
	bool BlockingLineIsBlocking()
	{
		if ( !BlockingLine ) return false;
		// one-sided
		if ( !BlockingLine.sidedef[1] ) return true;
		// blocks us
		if ( BlockingLine.flags&(Line.ML_BLOCKING|Line.ML_BLOCKMONSTERS|Line.ML_BLOCKEVERYTHING) ) return true;
		return false;
	}
	override void Tick()
	{
		Super.Tick();
		// crush anything we're standing on
		bool dummy;
		Actor a;
		[dummy, a] = TestMobjZ(true);
		if ( (pos.z <= floorz+8) || a )
		{
			if ( wasinair )
			{
				wasinair = false;
				for ( int i=0; i<360; i+=30 )
				{
					let p = Spawn("PunchPuff",Vec3Angle(radius/2,i),ALLOW_REPLACE);
					p.vel.xy = (cos(i),sin(i))*5;
				}
				A_QuakeEx(4,4,4,15,0,900,"",QF_RELATIVE|QF_SCALEDOWN,falloff:500);
				A_PlaySound("nightmarelord/stomp",CHAN_7);
				A_PlaySound("hellsmith/step");
			}
		}
		else wasinair = true;
		if ( (Health > 0) && a && a.bSHOOTABLE && (a.Health > 0) && (a.pos.z < pos.z) )
			a.DamageMobj(self,self,50,'Crush');
	}
	void A_DecideDash()
	{
		if ( !target || (target.Health <= 0) ) return;
		if ( !Random[MinotaurExDecide](0,10) && IsVisible(target,true) && A_Lunge(true) )
		{
			SetStateLabel("Lunge");
			return;
		}
		if ( special2 > 0 )
		{
			special2--;
			return;
		}
		if ( Random[MinotaurExDecide](0,30) || (Distance2D(target) < 400) ) return;
		special2 = 80;
		// simulate dash in a straight line
		Vector2 dir = RotateVector((speed*3,0),AngleTo(target));	// he fast
		Vector3 oldpos = pos;
		bool success = false;
		for ( int i=0; i<50; i++ )
		{
			if ( TryMove(Vec2Offset(dir.x,dir.y),int(maxdropoffheight)) )
				continue;
			if ( BlockingMobj == target )
			{
				success = true;
				break;
			}
			if ( BlockingLineIsBlocking() || (BlockingMobj && BlockingMobj.bSOLID && !(BlockingMobj is 'mkMovingFloorTrap')) )
				break;
		}
		SetOrigin(oldpos,false);
		if ( success )
		{
			ccnt = 0;
			SetStateLabel("Dash");
		}
	}
	void A_DashThink()
	{
		A_FaceTarget(0.1);
		Vector2 dir = RotateVector((speed*3,0),angle);
		if ( TryMove(Vec2Offset(dir.x,dir.y),int(maxdropoffheight)) )
		{
			if ( ccnt&1 )
			{
				Actor s;
				s = Spawn("PunchPuff",Vec3Angle(radius*0.6,angle+90),ALLOW_REPLACE);
				s.vel.z = 2;
				s = Spawn("PunchPuff",Vec3Angle(radius*0.6,angle-90),ALLOW_REPLACE);
				s.vel.z = 2;
				A_QuakeEx(2,2,2,4,0,600,"",QF_RELATIVE|QF_SCALEDOWN,falloff:100);
			}
			ccnt++;
			if ( !target || (abs(deltaangle(angle,AngleTo(target))) > 90) ) ccnt += 2;
			if ( ccnt > 40 )
			{
				SetStateLabel("DashMiss");
				return;
			}
			return;
		}
		if ( BlockingMobj && BlockingMobj.bSOLID && !(BlockingMobj is 'mkMovingFloorTrap') )
		{
			if ( BlockingMobj.bSHOOTABLE )
			{
				int dmg = Random[MinotaurMelee](30,35);
				int nd = BlockingMobj.DamageMobj(self,self,dmg,'Slam');
				if ( (BlockingMobj.Mass < LARGE_MASS) && !BlockingMobj.bDONTTHRUST )
				{
					BlockingMobj.vel.xy = dir.unit()*4000/BlockingMobj.mass;
					BlockingMobj.vel.z = 10;
				}
				if ( !BlockingMobj.bNOBLOOD ) BlockingMobj.TraceBleedAngle((nd>0)?nd:dmg,angle,0);
			}
			vel.xy = -dir*0.3;
			vel.z = 2;
			if ( !BlockingMobj.bSHOOTABLE || BlockingMobj.bNOBLOOD )
				BlockingMobj.A_PlaySound("FighterHammerHitWall");
			else BlockingMobj.A_PlaySound("FighterHammerHitThing");
			A_QuakeEx(4,4,4,15,0,800,"",QF_RELATIVE|QF_SCALEDOWN,falloff:250);
			SetStateLabel("DashHit");
			return;
		}
		vel.xy = -dir*0.3;
		vel.z = 2;
		A_QuakeEx(6,6,6,20,0,900,"",QF_RELATIVE|QF_SCALEDOWN,falloff:300);
		A_PlaySound("FighterHammerHitWall");
		SetStateLabel("Pain");
	}
	void A_StartBrake()
	{
		ccnt = 0;
		bstr = speed*2;
		vel.xy = RotateVector((bstr,0),angle);
		A_PlaySound("hellsmith/step",CHAN_5);
		A_PlaySound("hellsmith/skid",CHAN_ITEM);
	}
	void A_BrakeThink()
	{
		if ( !(ccnt%3) && (vel.length() > 2) )
		{
			Actor p;
			p = Spawn("PunchPuff",Vec3Angle(radius*0.6,angle+90));
			p.vel.z = 2;
			p = Spawn("PunchPuff",Vec3Angle(radius*0.6,angle-90));
			p.vel.z = 2;
			A_QuakeEx(2,2,2,4,0,600,"",QF_RELATIVE|QF_SCALEDOWN,falloff:100);
		}
		ccnt++;
		A_FaceTarget(3);
		vel.xy = vel.xy*0.8+RotateVector((bstr,0)*0.2,angle);
		bstr *= 0.95;
		if ( vel.xy.length() <= 2 )
		{
			SetState(CurState+1);
			return;
		}
		if ( BlockingLineIsBlocking() || (BlockingMobj && BlockingMobj.bSOLID) )
		{
			A_PlaySound("FighterHammerHitWall");
			vel.xy = -vel.xy;
			vel.z = 2;
			SetState(CurState+1);
		}
	}
	bool A_Lunge( bool test = false )
	{
		if ( !target ) return false;
		double grav = gravity*cursector.gravity;
		Vector3 diff = level.Vec3Diff(pos,target.Vec3Offset(0,0,target.height));
		double x = diff.xy.length(), y = diff.z;
		double ds = speed**4-grav*(grav*x*x+2*y*speed**2);
		double spitch;
		if ( ds > 0 )
		{
			double a1, a2, high, low, maxht;
			a1 = atan((speed**2+sqrt(ds))/(grav*x));
			a2 = atan((speed**2-sqrt(ds))/(grav*x));
			if ( a1 < a2 )
			{
				low = a1;
				high = a2;
			}
			else
			{
				low = a2;
				high = a1;
			}
			// use lower pitch provided it's not too low
			if ( low > 40 ) spitch = low;
			else spitch = high;
		}
		else spitch = -1;
		if ( test )
		{
			double h = (speed*speed*sin(spitch)*sin(spitch))/(grav*grav);
			// we need to verify that the pitch is within a reasonable range
			// and that the jump is high enough, but not too high so as to hit the ceiling
			return ((spitch > 40) && (spitch < 70) && (h > height) && (h < ceilingz-(floorz+height)));
		}
		A_FaceTarget();
		lungepitch = -spitch;
		return true;
	}
	void A_DoLunge()
	{
		A_FaceTarget(30);
		vel = speed*(cos(angle)*cos(lungepitch),sin(angle)*cos(lungepitch),sin(-lungepitch));
		for ( int i=0; i<360; i+=30 )
		{
			let p = Spawn("PunchPuff",Vec3Angle(radius/2,i),ALLOW_REPLACE);
			p.vel.xy = (cos(i),sin(i))*5;
		}
		A_QuakeEx(4,4,4,15,0,900,"",QF_RELATIVE|QF_SCALEDOWN,falloff:500);
		A_PlaySound("nightmarelord/stomp",CHAN_7);
		wasinair = true;
	}
	void A_LungeThink( bool alt = false )
	{
		// reorient
		if ( target )
		{
			A_FaceTarget(0.5);
			vel.xy = (cos(angle),sin(angle))*vel.xy.length();
		}
		if ( vel.z < 0 )
		{
			if ( frame == 4 ) frame = 5;
			else if ( frame == 9 ) frame = 10;
		}
		bool dummy;
		Actor onmobj;
		[dummy, onmobj] = TestMobjZ(true);
		if ( !BlockingMobj && !BlockingLineIsBlocking() && wasinair && !onmobj ) return;
		if ( CheckMeleeRange() && (abs(deltaangle(angle,AngleTo(target)) < 45)) )
			A_FaceTarget(20);
		if ( BlockingLineIsBlocking() )
		{
			A_QuakeEx(5,5,5,15,0,500,"",QF_RELATIVE|QF_SCALEDOWN,falloff:200);
			A_PlaySound("FighterHammerHitWall");
			vel.xy = RotateVector((-4,0),angle);
			vel.z = 3;
			SetStateLabel("Pain");
		}
		else if ( vel.z <= 0 )
		{
			if ( alt ) SetStateLabel("Melee2_");
			else SetStateLabel("Melee1_");
		}
	}
	void A_HellsmithMelee( bool ground = false, bool alt = false )
	{
		special1 = 0;
		let bi = BlockThingsIterator.Create(self,1024);
		while ( bi.Next() )
		{
			Actor a = bi.Thing;
			if ( !a || (a.species == species) || !a.bSHOOTABLE || (Distance2D(a) > meleerange*1.3+a.radius) ) continue;
			Vector3 diff = level.Vec3Diff(pos,a.pos);
			if ( (diff.z > height) || (diff.z < -a.height) ) continue;
			if ( ground && (diff.z > height*0.4) ) continue;
			else if ( !ground && (diff.z < height*0.3) ) continue;
			Vector3 sc = level.SphericalCoords(pos,a.pos,(angle,0));
			if ( abs(sc.x) > 50 ) continue;
			int dmg = Random[MinotaurMelee](20,25);
			int nd = a.DamageMobj(self,self,dmg,'Melee');
			if ( (a.Mass < LARGE_MASS) && !a.bDONTTHRUST )
			{
				a.vel.xy = Vec2To(a).unit()*1800/a.mass;
				a.vel.z = ground?6:3;
			}
			if ( !a.bNOBLOOD ) a.TraceBleedAngle((nd>0)?nd:dmg,angle,0);
			if ( a.bNOBLOOD ) a.A_PlaySound("FighterHammerHitWall");
			else a.A_PlaySound("FighterHammerHitThing");
		}
		if ( ground )
		{
			A_QuakeEx(6,6,6,20,0,500,"",QF_RELATIVE|QF_SCALEDOWN,falloff:200);
			A_PlaySound("FighterHammerHitWall",CHAN_WEAPON);
			for ( int i=-120; i<120; i+=30 )
			{
				let p = Spawn("PunchPuff",Vec3Angle(meleerange,angle+(alt?5:-5)),ALLOW_REPLACE);
				p.vel.xy = (cos(angle+i),sin(angle+i))*8;
			}
		}
	}
	void A_DecideMissile()
	{
		if ( !target || (target.Health <= 0) ) return;
		A_FaceTarget();
		double d = Distance3D(target);
		if ( !Random[MinotaurExMissile](0,3) )
			SetStateLabel("Missile1");
		else if ( !Random[MinotaurExMissile](0,4) && (d < 600) )
			SetStateLabel("Missile2");
		else if ( !Random[MinotaurExMissile](0,2) )
			SetStateLabel("Missile3");
		else SetStateLabel("Missile4");
	}
	void A_HellsmithFireSwirl( bool alt = false )
	{
		for ( int i=-30; i<=30; i+=20 )
		{
			let p = Spawn("mkMinotaurExSwirl",Vec3Angle(meleerange,angle+(alt?5:-5)));
			p.target = self;
			p.angle = angle+i;
			p.vel.xy = (cos(p.angle),sin(p.angle))*p.speed;
		}
	}
	void A_HellsmithFirePillar()
	{
		double iang = FRandom[MinotaurExMissile](0,360);
		special1++;
		double idist = 70+special1*42+FRandom[MinotaurExMissile](-10,10);
		Vector3 spawnspot;
		for ( int i=0; i<360; i+=15 )
		{
			spawnspot = Vec3Angle(idist,iang+i,height/2);
			if ( !level.IsPointInMap(spawnspot) ) continue;
			let p = Spawn("mkMinotaurExFirePillar",spawnspot);
			p.target = self;
			break;
		}
	}
	void A_HellsmithShockwave( bool alt = false )
	{
		for ( int i=-30; i<30; i+=5 )
		{
			let p = Spawn("mkMinotaurExShockwave",Vec3Angle(meleerange,angle+(alt?5:-5)));
			p.target = self;
			p.angle = angle+i;
			p.vel.xy = (cos(angle+i),sin(angle+i))*p.speed;
			p.alpha *= (30-abs(i*0.75))/30.;
		}
	}
	void A_HellsmithFirePellet( bool alt = false )
	{
		double ang = 0;
		if ( alt ) ang -= (special1*20)-60;
		else ang += (special1*20)-60;
		let a = Spawn("mkMinotaurExFirePellet",Vec3Angle(meleerange,angle+ang,missileheight+FRandom[MinotaurExBurst](-30,30)));
		a.angle = angle+ang*0.2;
		a.target = self;
		a.tracer = target;
		a.angle += FRandom[MinotaurExBurst](-5,5);
		a.pitch += FRandom[MinotaurExBurst](-5,5);
		special1++;
	}
	void A_IgnorePain()
	{
		bNOPAIN = true;
	}
	void A_ResetPain()
	{
		bNOPAIN = false;
	}
	States
	{
	Spawn:
		MIN2 G 80;
		Goto Idle;
	Idle:
		MIN2 A 2 A_Look();
		Wait;
	See:
		MIN2 A 0 { scnt = 2; }
		MIN2 AABBCCDD 3
		{
			// cheap fix
			if ( floorpic == TexMan.CheckForTexture("X_001",TexMan.Type_Flat) )
				Teleport((-4096,2816,128),270,TELF_SOURCEFOG|TELF_DESTFOG);
			scnt++;
			if ( wasinair ) return ResolveState("Fall");
			if ( !(scnt%4) )
			{
				A_QuakeEx(5,5,5,10,0,800,"",QF_RELATIVE|QF_SCALEDOWN,falloff:100);
				A_PlaySound("hellsmith/step",(scnt%8)?CHAN_6:CHAN_5);	// prevent overwrite
			}
			A_Chase();
			A_DecideDash();
			return ResolveState(null);
		}
		Loop;
	Fall:
		MIN2 A 0 A_Jump(128,3);
		MIN2 E 1 A_JumpIf(vel.z<0,1);
		Wait;
		MIN2 F 1 A_JumpIf(!wasinair,"Melee1_");
		Wait;
		MIN2 J 1 A_JumpIf(vel.z<0,1);
		Wait;
		MIN2 K 1 A_JumpIf(!wasinair,"Melee2_");
		Wait;
	Dash:
		MIN2 A 0 { A_FaceTarget(); A_IgnorePain(); scnt = 1; ccnt = 0; }
		MIN2 A 8 A_PlaySound("hellsmith/charge",CHAN_VOICE);
		MIN2 ABCDABCD 5
		{
			scnt++;
			if ( !(scnt%2) )
			{
				A_QuakeEx(5,5,5,10,0,800,"",QF_RELATIVE|QF_SCALEDOWN,falloff:100);
				A_PlaySound("hellsmith/step",(scnt%8)?CHAN_6:CHAN_5);	// prevent overwrite
			}
			ccnt++;
			tics = max(1,6-ccnt/3);
			A_FaceTarget(20);
		}
		MIN2 O 0 A_PlaySound("BishopAttack",CHAN_7);
		MIN2 O 1 A_DashThink();
		Wait;
	DashHit:
		MIN2 O 12 A_ResetPain();
		Goto See;
	DashMiss:
		MIN2 A 0
		{
			A_StartBrake();
			A_ResetPain();
		}
		MIN2 A 0 A_Jump(128,3);
		MIN2 I 1 A_BrakeThink();
		Wait;
		MIN2 I 10;
		Goto See;
		MIN2 N 1 A_BrakeThink();
		Wait;
		MIN2 N 10;
		Goto See;
	Lunge:
		MIN2 A 0 A_Lunge();
		MIN2 A 3 A_PlaySound("hellsmith/charge",CHAN_VOICE);
		MIN2 A 0 A_Jump(128,3);
		MIN2 E 2 A_DoLunge();
		MIN2 # 1 A_LungeThink();
		Wait;
		MIN2 J 2 A_DoLunge();
		MIN2 # 1 A_LungeThink(true);
		Wait;
	Missile:
		MIN2 A 1 A_DecideMissile();
		Goto See;
	Missile1:
		MIN2 A 0 A_Jump(128,"Missile1L");
	Missile1R:
		MIN2 E 0 A_FaceTarget();
		MIN2 EE 4 A_FaceTarget(20);
		MIN2 F 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 FF 4 A_FaceTarget(20);
		MIN2 G 0 A_HellsmithMelee(true);
		MIN2 G 20 A_HellsmithFireSwirl();
		MIN2 A 0 A_JumpIf(!target||(target.Health<=0)||!IsVisible(target,false),"See");
		MIN2 A 0 A_Jump(80,"Missile1L");
		Goto See;
	Missile1L:
		MIN2 J 0 A_FaceTarget();
		MIN2 JJ 4 A_FaceTarget(20);
		MIN2 K 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 KK 4 A_FaceTarget(20);
		MIN2 L 0 A_HellsmithMelee(true,true);
		MIN2 L 20 A_HellsmithFireSwirl();
		MIN2 A 0 A_JumpIf(!target||(target.Health<=0)||!IsVisible(target,false),"See");
		MIN2 A 0 A_Jump(80,"Missile1R");
		Goto See;
	Missile2:
		MIN2 A 0 A_Jump(128,"Missile2L");
	Missile2R:
		MIN2 E 0 A_FaceTarget();
		MIN2 EE 4 A_FaceTarget(20);
		MIN2 F 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 FF 4 A_FaceTarget(20);
		MIN2 G 0 A_HellsmithMelee(true);
		MIN2 G 0 A_IgnorePain();
		MIN2 GGGGGGGGGGGGGGG 4 A_HellsmithFirePillar();
		MIN2 G 30;
		MIN2 G 0 A_ResetPain();
		Goto See;
	Missile2L:
		MIN2 J 0 A_FaceTarget();
		MIN2 JJ 4 A_FaceTarget(20);
		MIN2 K 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 KK 4 A_FaceTarget(20);
		MIN2 L 0 A_HellsmithMelee(true,true);
		MIN2 L 0 A_IgnorePain();
		MIN2 LLLLLLLLLLLLLLL 4 A_HellsmithFirePillar();
		MIN2 L 30;
		MIN2 L 0 A_ResetPain();
		Goto See;
	Missile3:
		MIN2 A 0 A_Jump(128,"Missile3L");
	Missile3R:
		MIN2 E 0 A_FaceTarget();
		MIN2 EE 4 A_FaceTarget(20);
		MIN2 F 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 FF 4 A_FaceTarget(20);
		MIN2 G 0 A_HellsmithMelee(true);
		MIN2 G 20 A_HellsmithShockwave();
		MIN2 A 0 A_JumpIf(!target||(target.Health<=0)||!IsVisible(target,false),"See");
		MIN2 A 0 A_Jump(120,"Missile3L");
		Goto See;
	Missile3L:
		MIN2 J 0 A_FaceTarget();
		MIN2 JJ 4 A_FaceTarget(20);
		MIN2 K 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 KK 4 A_FaceTarget(20);
		MIN2 L 0 A_HellsmithMelee(true,true);
		MIN2 L 20 A_HellsmithShockwave(true);
		MIN2 A 0 A_JumpIf(!target||(target.Health<=0)||!IsVisible(target,false),"See");
		MIN2 A 0 A_Jump(120,"Missile3R");
		Goto See;
	Missile4:
		Min2 A 0 A_Jump(128,"Missile4L");
	Missile4R:
		MIN2 E 0 A_FaceTarget();
		MIN2 EE 4 A_FaceTarget(20);
		MIN2 H 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 HH 4 A_FaceTarget(20);
		MIN2 I 0 A_HellsmithMelee();
		MIN2 IIIIIIIIII 3 A_HellsmithFirePellet();
		MIN2 I 10;
		MIN2 A 0 A_JumpIf(!target||(target.Health<=0)||!IsVisible(target,false),"See");
		MIN2 A 0 A_Jump(80,"Missile4L");
		Goto See;
	Missile4L:
		MIN2 J 0 A_FaceTarget();
		MIN2 JJ 4 A_FaceTarget(20);
		MIN2 M 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 MM 4 A_FaceTarget(20);
		MIN2 N 0 A_HellsmithMelee();
		MIN2 NNNNNNNNNN 3 A_HellsmithFirePellet(true);
		MIN2 N 10;
		MIN2 A 0 A_JumpIf(!target||(target.Health<=0)||!IsVisible(target,false),"See");
		MIN2 A 0 A_Jump(80,"Missile4R");
		Goto See;
	Melee:
		MIN2 A 4 A_FaceTarget();
		MIN2 A 0 A_JumpIf(target&&(target.pos.z > pos.z+height*0.4),"MeleeHigh");
		MIN2 A 0 A_Jump(128,"Melee2");
	Melee1:
		MIN2 EEE 4 A_FaceTarget(20);
		MIN2 F 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 FF 4 A_FaceTarget(20);
	Melee1_:
		MIN2 G 20 A_HellsmithMelee(true);
		MIN2 A 0 A_JumpIf(CheckMeleeRange()&&target&&(target.Health>0),"Melee2");
		Goto See;
	Melee2:
		MIN2 JJJ 4 A_FaceTarget(20);
		MIN2 K 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 KK 4 A_FaceTarget(20);
	Melee2_:
		MIN2 L 20 A_HellsmithMelee(true,true);
		MIN2 A 0 A_JumpIf(CheckMeleeRange()&&target&&(target.Health>0),"Melee1");
		Goto See;
	MeleeHigh:
		MIN2 A 0 A_Jump(128,"MeleeHigh2");
	MeleeHigh1:
		MIN2 EEE 4 A_FaceTarget(20);
		MIN2 H 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 HH 4 A_FaceTarget(20);
		MIN2 I 20 A_HellsmithMelee();
		MIN2 A 0 A_JumpIf(CheckMeleeRange()&&target&&(target.Health>0),"MeleeHigh2");
		Goto See;
	MeleeHigh2:
		MIN2 JJJ 4 A_FaceTarget(20);
		MIN2 M 0 A_PlaySound("hellsmith/swing",CHAN_ITEM);
		MIN2 MM 4 A_FaceTarget(20);
		MIN2 N 20 A_HellsmithMelee();
		MIN2 A 0 A_JumpIf(CheckMeleeRange()&&target&&(target.Health>0),"MeleeHigh1");
		Goto See;
	Pain:
		MIN2 P 4 A_ResetPain();
		MIN2 P 4 A_Pain();
		Goto See;
	Death:
		MINX A 5
		{
			A_ResetPain();
			A_QuakeEx(6,6,6,80,0,1200,"",QF_RELATIVE|QF_SCALEDOWN,falloff:400);
		}
		MINX B 6 A_Scream();
		MINX C 5;
		MINX D 6;
		MINX E 5;
		MINX F 6;
		MINX G 5 A_NoBlocking();
		MINX H 6;
		MINX I 5;
		MINX J 6;
		MINX K 5;
		MINX L 6;
		MINX M 5;
		MINX N 6;
		MINX O -1;
		Stop;
	}
}

Class mkMinotaurExFloorTrailLight : DynamicLight
{
	Default
	{
		DynamicLight.Type "RandomFlicker";
		+DYNAMICLIGHT.ATTENUATE;
		args 255, 204, 0, 100, 104;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		specialf1 = 3;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		args[0] = int(255*target.alpha);
		args[1] = int(204*target.alpha);
		args[3] = int(100*target.alpha);
		args[4] = int(100*target.alpha)+4;
	}
}

Class mkMinotaurExFloorTrail : Actor
{
	Default
	{
		RenderStyle "Add";
		Scale 1.8;
		DamageType 'Fire';
		+NOGRAVITY;
		+NOBLOCKMAP;
		+DONTSPLASH;
		+NOBLOOD;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( special1 ) return;
		let l = Spawn("mkMinotaurExFloorTrailLight",pos);
		l.target = self;
	}
	States
	{
	Spawn:
		FFLG ABCD 2 Bright
		{
			if ( GetAge()%8 < 2 ) A_Explode(5,30,0,false,20);
		}
		Goto Death;
	Death:
		FFLG EFGHIJKLMNOPQ 2 Bright
		{
			A_FadeOut(0.04);
			A_SetScale(scale.x*0.96);
			if ( GetAge()%8 < 2 ) A_Explode(5,int(30*alpha),0,false,int(20*alpha));
		}
		Loop;
	}
}

Class mkMinotaurExSwirl : Actor
{
	Default
	{
		RenderStyle "Add";
		Radius 5;
		Height 12;
		Speed 6;
		ReactionTime 90;
		Damage 5;
		DamageType 'Fire';
		Projectile;
		+DONTSPLASH;
		+STEPMISSILE;
		+NOEXPLODEFLOOR;
		DeathSound "ClericFlameExplode";
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		special1 = RandomPick[MinotaurExSwirl](-1,1);
		A_PlaySound("ClericFlameFire");
	}
	override int DoSpecialDamage( Actor target, int damage, Name damagetype )
	{
		if ( damage <= 0 ) return damage;
		if ( (target.mass < LARGE_MASS) && !target.bDONTTHRUST ) target.vel.z += 5;
		return damage;
	}
	void A_SwirlTrail()
	{
		SetZ(floorz);
		let s = Spawn("mkMinotaurExFloorTrail",pos);
		s.target = target;
		s.scale *= FRandom[MinotaurExSwirl](0.5,0.7);
		s.special1 = !!(GetAge()%3);
		if ( Random[MinotaurExSwirl](0,1) ) s.bSPRITEFLIP = true;
		double newspeed = vel.xy.length()*1.1;
		if ( newspeed > 30 ) newspeed = 30;
		angle += special1*sin(GetAge()*15)*2.5;
		vel.xy = (cos(angle),sin(angle))*newspeed;
		A_CountDown();
	}
	States
	{
	Spawn:
		TNT1 A 1 A_SwirlTrail();
		Wait;
	Death:
		CFCF Q 2 Bright A_Explode(Random[MinotaurExSwirl](20,30),120,0);
		CFCF RSTUVWXYZ 2 Bright;
		Stop;
	}
}

Class mkMinotaurExShockwaveTail : Actor
{
	Default
	{
		RenderStyle "Translucent";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+WALLSPRITE;
	}
	States
	{
	Spawn:
		SDST A 1
		{
			A_FadeOut(0.08);
			A_SetScale(scale.x,scale.y*0.98);
		}
		Wait;
	}
}

Class mkMinotaurExShockwave : Actor
{
	Default
	{
		RenderStyle "Translucent";
		Speed 25;
		DamageFunction int(12*alpha);
		Radius 16;
		Height 8;
		Alpha 0.8;
		Scale 2.0;
		+NOBLOCKMAP;
		+DONTSPLASH;
		+MISSILE;
		+STEPMISSILE;
		+NOEXPLODEFLOOR;
		+WALLSPRITE;
		+RIPPER;
	}
	override int DoSpecialDamage( Actor target, int damage, Name damagetype )
	{
		if ( damage <= 0 ) return damage;
		if ( (target.mass < LARGE_MASS) && !target.bDONTTHRUST )
		{
			A_PlaySound("FighterHammerMiss",CHAN_AUTO,alpha);
			target.vel.xy += vel.xy.unit()*4000/target.mass*alpha;
			target.vel.z += 20*alpha;
		}
		return damage;
	}
	States
	{
	Spawn:
		SDST A 1
		{
			SetZ(floorz);
			let s = Spawn("mkMinotaurExShockwaveTail",pos);
			s.scale = scale;
			s.alpha = alpha;
			s.angle = angle;
			A_FadeOut(0.01);
			A_SetScale(scale.x*1.03,scale.y*0.99);
		}
		Wait;
	Death:
		SDST A 1
		{
			SetZ(floorz);
			A_FadeOut(0.05);
			A_SetScale(scale.x*1.06,scale.y*0.98);
		}
		Wait;
	}
}

// spawn on floor
// sets a translation based on the floorpic (only two needed for this map pack, one for dirt and one for stone)
// erupts after a delay
Class mkMinotaurExFirePillar : Actor
{
	Default
	{
		RenderStyle "Translucent";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
	}
	void A_Settle()
	{
		// stone translation
		if ( TexMan.GetName(floorpic) ~== "F_057" ) A_SetTranslation('mkMinotaurExPillarGray');
		SetZ(floorz);
		A_SetTics(Random[MinotaurExPillar](10,20));
	}
	void A_FirePillar()
	{
		let s = Spawn("mkMinotaurExPillarFire",Vec3Offset(FRandom[MinotaurExPillar](-2,2),FRandom[MinotaurExPillar](-2,2),FRandom[MinotaurExPillar](8,10)));
		s.target = target;
		s.vel.xy = (FRandom[MinotaurExPillar](-1,1),FRandom[MinotaurExPillar](-1,1));
		s.vel.z = 12*scale.x;
		s.alpha = 0.5+scale.x;
		s.scale *= FRandom[MinotaurExPillar](0.6,1.2)*(0.5+scale.x);
		s.SetState(s.FindState("Spawn")+int((1.0-scale.x)*10));
		A_SetScale(scale.x*0.95);
		if ( scale.x < 0.25 ) A_FadeOut();
	}
	States
	{
	Spawn:
		TNT1 A 10 NoDelay A_Settle();
		TSPK C 0 A_PlaySound("Ambient11",CHAN_WEAPON);
		TSPK C 10 A_QuakeEx(3,3,3,30,0,400,"",QF_RELATIVE|QF_SCALEDOWN,falloff:200);
		TSPK D 6;
		TSPK E 0 A_PlaySound("DemonMissileFire",CHAN_VOICE);
		TSPK E 2 A_FirePillar();
		Wait;
	}
}

Class mkMinotaurExPillarFire : Actor
{
	Default
	{
		RenderStyle "Add";
		Radius 4;
		Height 8;
		DamageType 'Fire';
		+NOBLOOD;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+DONTSPLASH;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bSPRITEFLIP = Random[MinotaurExFirePillar](0,1);
	}
	override int DoSpecialDamage( Actor target, int damage, Name damagetype )
	{
		if ( damage <= 0 ) return damage;
		if ( (target.mass < LARGE_MASS) && !target.bDONTTHRUST ) target.vel.z += 1;
		return damage;
	}
	States
	{
	Spawn:
		CFFX ABCDEFGHIJKLM 2 Bright
		{
			A_FadeOut();
			A_Explode(int(8*scale.x*alpha),int(60*scale.x*alpha),0,false,int(40*scale.x*alpha));
		}
		Stop;
	}
}

// fades in and then launches towards tracer
Class mkMinotaurExFirePellet : Actor
{
	Vector3 InitialDir, Acceleration;
	Default
	{
		RenderStyle "Add";
		Damage 3;
		Radius 2;
		Height 2;
		Alpha 0.2;
		Scale 0.2;
		Projectile;
		DeathSound "FireDemonMissileHit";
	}
	void A_DTSeeker( double f = 0.5 )
	{
		if ( InitialDir.length() < double.epsilon ) InitialDir = vel.unit();
		if ( tracer && (tracer != target) )
		{
			Vector3 SeekingDir = level.Vec3Diff(pos,tracer.Vec3Offset(0,0,tracer.height/2)).unit();
			if ( SeekingDir dot InitialDir > 0 )
			{
				double MagnitudeVel = Vel.length();
				SeekingDir = (SeekingDir*f*MagnitudeVel+Vel).unit();
				Vel = MagnitudeVel * SeekingDir;
				Acceleration = 25 * SeekingDir;
			}
		}
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay A_SetTics(Random[MinotaurExPellet](3,6));
		FDMB Z 1 Bright
		{
			A_FadeIn(0.1);
			A_SetScale(scale.x+0.1);
			if ( scale.x >= 1.0 )
			{
				alpha = 1.0;
				scale = (1.0,1.0);
				A_PlaySound("FireDemonAttack2",CHAN_WEAPON);
				vel = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
				Acceleration = vel*25.;
				return ResolveState("Seek");
			}
			return ResolveState(null);
		}
		Wait;
	Seek:
		FDMB A 1 Bright
		{
			let s = Spawn("mkSmokePoof",pos);
			s.scale *= 0.6;
			if ( !(GetAge()%3) ) A_DTSeeker(0.5);
			vel += Acceleration/TICRATE;
			vel += (FRandom[MinotaurExPelle](-1,1),FRandom[MinotaurExPelle](-1,1),FRandom[MinotaurExPelle](-1,1))*FRandom[MinotaurExPelle](0.3,0.6);
			Vector3 dir = vel.unit();
			if ( vel.length() > 30. ) vel = dir*30.;
			angle = atan2(dir.y,dir.x);
			pitch = asin(-dir.z);
		}
		Loop;
	Death:
		FDMB BCDE 5 Bright;
		Stop;
	}
}
